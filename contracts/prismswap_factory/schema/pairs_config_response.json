{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PairsConfigResponse",
  "type": "object",
  "required": [
    "pairs"
  ],
  "properties": {
    "pairs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PairConfigResponse"
      }
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfoBase_for_Addr": {
      "description": "Represents the type of an fungible asset\n\nEach **asset info** instance can be one of two variants:\n\n- CW20 tokens. To create an **asset info** instance of this type, provide the contract address. - Native SDK coins. To create an **asset info** instance of this type, provide the denomination.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "FeeConfig": {
      "title": "Description",
      "description": "This structure describes a configuration of pair.",
      "type": "object",
      "required": [
        "protocol_fee",
        "total_fee"
      ],
      "properties": {
        "protocol_fee": {
          "$ref": "#/definitions/Decimal"
        },
        "total_fee": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "PairConfigResponse": {
      "type": "object",
      "required": [
        "fee_config",
        "pair_info"
      ],
      "properties": {
        "fee_config": {
          "$ref": "#/definitions/FeeConfig"
        },
        "pair_info": {
          "$ref": "#/definitions/PairInfo"
        }
      }
    },
    "PairInfo": {
      "title": "Description",
      "description": "This structure describes the main controls configs of pair",
      "type": "object",
      "required": [
        "asset_infos",
        "contract_addr",
        "liquidity_token"
      ],
      "properties": {
        "asset_infos": {
          "description": "the type of asset infos available in [`AssetInfo`]",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetInfoBase_for_Addr"
          },
          "maxItems": 2,
          "minItems": 2
        },
        "contract_addr": {
          "description": "pair contract address",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "liquidity_token": {
          "description": "pair liquidity token",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      }
    }
  }
}
